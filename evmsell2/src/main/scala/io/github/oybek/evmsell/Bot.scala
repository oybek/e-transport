package io.github.oybek.evmsell

import cats.implicits._
import cats.effect.Sync
import cats.effect.concurrent.Ref
import io.github.oybek.evmsell.db.repository.OfferRepository
import io.github.oybek.evmsell.model.Offer
import io.github.oybek.evmsell.service.WallPostHandler
import io.github.oybek.evmsell.vk._
import org.http4s.client.Client

case class Bot[F[_]: Sync](httpClient: Client[F],
                      userStates: Ref[F, Map[Long, List[Offer]]],
                      vkApi: VkApi[F],
                      offerRepository: OfferRepository[F],
                      getLongPollServerReq: GetLongPollServerReq,
                      wallPostHandler: WallPostHandler)
  extends LongPollBot[F](httpClient, vkApi, getLongPollServerReq) {

  lazy val sadSmile = "üòû"

  override def onMessageNew(message: MessageNew): F[Unit] =
    for {
      _ <- wallPostHandler.getTType(message.text.toLowerCase) match {
        case Some(thing) => whenNewSearch(message)(thing)
        case None => whenNotSearch(message)
      }
    } yield ()

  def whenNewSearch(message: MessageNew)(thing: String): F[Unit] =
    for {
      offers <- offerRepository.selectByTType(thing)
      _ <- offers match {
        case Nil =>
          vkApi.sendMessage(SendMessageReq(
            userId = message.fromId,
            message = s"–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É",
            version = getLongPollServerReq.version,
            accessToken = getLongPollServerReq.accessToken,
          ))
        case offersNonEmpty =>
          vkApi.sendMessage(SendMessageReq(
            userId = message.fromId,
            message = s"–Ø –Ω–∞—à–µ–ª ${offers.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø–æ–∫–∞–∂—É –ø–µ—Ä–≤—É—é.\n–ù–∞–ø–∏—à–∏ '–µ—â–µ' —è —Å–∫–∏–Ω—É —Å–ª–µ–¥—É—é—â–∏–µ",
            version = getLongPollServerReq.version,
            accessToken = getLongPollServerReq.accessToken,
            attachment = Some(s"wall-${getLongPollServerReq.groupId}_${offersNonEmpty.head.id}")
          ))
      }
      _ <- userStates.modify {
        states => (states + (message.fromId -> offers), states)
      }
    } yield ()

  def whenNotSearch(message: MessageNew): F[Unit] =
    for {
      states <- userStates.get
      offers = states.getOrElse(message.fromId, List())
      _ <- message.text match {
        case "–µ—â–µ" if offers.length >= 2 =>
          val rest = offers.tail
          for {
            _ <- userStates.modify { x =>
              (x + (message.fromId -> rest), x)
            }.void
            _ <- sendMessage(
              message.fromId,
              if (rest.length == 1) "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" else s"–ï—â–µ –µ—Å—Ç—å ${rest.length-1} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ",
              Some(s"wall-${getLongPollServerReq.groupId}_${rest.head.id}")
            )
          } yield ()

        case "–µ—â–µ" =>
          sendMessage(message.fromId, s"–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –∏—â–µ—à—å? (–ú–æ–Ω–∏–∫, –º—ã—à–∫—É, –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è)")

        case _ =>
          sendMessage(message.fromId, s"–ù–µ –æ—á–µ–Ω—å –ø–æ–Ω—è–ª —á—Ç–æ —Ç—ã –∏—â–µ—à—å $sadSmile")
      }
    } yield ()

  private def sendMessage(to: Long, text: String, attachment: Option[String] = None): F[Unit] = {
    vkApi.sendMessage(SendMessageReq(
      userId = to,
      message = text,
      version = getLongPollServerReq.version,
      accessToken = getLongPollServerReq.accessToken,
      attachment = attachment
    )).void
  }

  override def onWallPostNew(wallPostNew: WallPostNew): F[Unit] =
    wallPostNew.postType match {
      case Some("suggest") =>
        for {
          _ <- Sync[F].delay { println(wallPostNew.toString) }
          _ <- vkApi.sendMessage(SendMessageReq(
            userId = 213461412,
            message = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
            version = getLongPollServerReq.version,
            accessToken = getLongPollServerReq.accessToken,
            attachment = Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")
          ))
        } yield ()

      case Some("post") =>
        for {
          _ <- Sync[F].delay { println(wallPostNew.toString) }
          offer = wallPostHandler.wallPostToOffer(wallPostNew)
          _ <- offerRepository.insert(offer)
          _ <- wallPostNew.signerId map { signerId =>
            vkApi.sendMessage(SendMessageReq(
              userId = signerId,
              message = "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
              version = getLongPollServerReq.version,
              accessToken = getLongPollServerReq.accessToken,
              attachment = Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")
            ))
          } getOrElse {
            vkApi.sendMessage(SendMessageReq(
              userId = 213461412,
              message = "–¢—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏! –ü–æ–ø—Ä–∞–≤—å",
              version = getLongPollServerReq.version,
              accessToken = getLongPollServerReq.accessToken,
              attachment = Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")
            ))
          }
        } yield ()

      case _ =>
        Sync[F].delay().void
    }
}
