package io.github.oybek.evmsell

import cats.implicits._
import cats.effect.Sync
import cats.effect.concurrent.Ref
import io.github.oybek.evmsell.db.repository.{OfferRepository, UserRepository}
import io.github.oybek.evmsell.model.Offer
import io.github.oybek.evmsell.service.WallPostHandler
import io.github.oybek.evmsell.vk._
import org.http4s.client.Client
import org.slf4j.LoggerFactory

case class Bot[F[_]: Sync](httpClient: Client[F],
                      userStates: Ref[F, Map[Long, List[Offer]]],
                      vkApi: VkApi[F],
                      offerRepository: OfferRepository[F],
                      userRepository: UserRepository[F],
                      getLongPollServerReq: GetLongPollServerReq,
                      wallPostHandler: WallPostHandler)
  extends LongPollBot[F](httpClient, vkApi, getLongPollServerReq) {

  private val log = LoggerFactory.getLogger("bot")

  override def onMessageNew(message: MessageNew): F[Unit] =
    for {
      _ <- Sync[F].delay {
        log.info(s"Got message: $message")
      }
      _ <- message.geo.map { geo =>
        for {
          _ <- userRepository.upsert(message.fromId -> geo.coordinates)
          _ <- sendMessage(message.fromId,
            s"""
              |–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç
              |${geo.place.map(_.title).getOrElse("")}
              |""".stripMargin)
        } yield ()
      }.getOrElse {
        if (message.text.toLowerCase == "–Ω–∞—á–∞—Ç—å") {
          sendMessage(message.fromId,
            """
              |–ü—Ä–∏–≤–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
              |–Ø –±–æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ "–ü—Ä–æ–¥–∞–º –ö–æ–º–ø"
              |–Ø —Ö—Ä–∞–Ω—é –≤ –±–∞–∑–µ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å—Ç–µ–Ω—ã
              |–∏ –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ –ø–æ–∏—Å–∫–µ
              |–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' - —è –Ω–∞–ø–∏—à—É —á—Ç–æ —É–º–µ—é
              |–ò –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é - —á—Ç–æ–±—ã —è
              |–∑–Ω–∞–ª —Ç–≤–æ–π –≥–æ—Ä–æ–¥ (—ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞)
              |""".stripMargin)
        } else {
          wallPostHandler.getTType(message.text.toLowerCase) match {
            case Some(thing) => for {
              user <- userRepository.selectById(message.fromId)
              _ <- user.map(usr => whenNewSearch(message)(thing, usr._2)).getOrElse(
                sendMessage(message.fromId, "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ - –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
              )
            } yield ()
            case None => whenNotSearch(message)
          }
        }
      }
    } yield ()

  def whenNewSearch(message: MessageNew)(thing: String, userPos: Coord): F[Unit] =
    for {
      offers <- offerRepository.selectByTType(thing).map { offs =>
        val from = "–æ—Ç[ ]+\\d+".r.findFirstIn(message.text).map(_.split(' ')(1).toLong).getOrElse(0L)
        val to = "–¥–æ[ ]+\\d+".r.findFirstIn(message.text).map(_.split(' ')(1).toLong).getOrElse(1000000L)
        offs.filter(offer =>
          offer.price.exists(x => x >= from && x <= to) &&
          offer.coord.exists(_.distKmTo(userPos) < 50)
        )
      }
      _ <- offers match {
        case Nil =>
          vkApi.sendMessage(SendMessageReq(
            userId = message.fromId,
            message = s"–ù–µ –Ω–∞—à–µ–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É",
            version = getLongPollServerReq.version,
            accessToken = getLongPollServerReq.accessToken,
          ))
        case offersNonEmpty =>
          vkApi.sendMessage(SendMessageReq(
            userId = message.fromId,
            message = s"–Ø –Ω–∞—à–µ–ª ${offers.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n–ù–∞–ø–∏—à–∏ '–µ—â–µ' —è —Å–∫–∏–Ω—É —Å–ª–µ–¥—É—é—â–µ–µ",
            version = getLongPollServerReq.version,
            accessToken = getLongPollServerReq.accessToken,
            attachment = Some(s"wall-${getLongPollServerReq.groupId}_${offersNonEmpty.head.id}")
          ))
      }
      _ <- userStates.modify {
        states => (states + (message.fromId -> offers), states)
      }
    } yield ()

  def whenNotSearch(message: MessageNew): F[Unit] =
    for {
      states <- userStates.get
      offers = states.getOrElse(message.fromId, List())
      _ <- message.text.toLowerCase match {
        case "–µ—â–µ" if offers.length >= 2 =>
          val rest = offers.tail
          for {
            _ <- userStates.modify { x =>
              (x + (message.fromId -> rest), x)
            }.void
            _ <- sendMessage(
              message.fromId,
              if (rest.length == 1) "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" else s"–û—Å—Ç–∞–ª–æ—Å—å ${rest.length-1}",
              Some(s"wall-${getLongPollServerReq.groupId}_${rest.head.id}")
            )
          } yield ()

        case "–ø–æ–º–æ—â—å" =>
          sendMessage(message.fromId,
            s"""
               |–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å:
               |–ù–æ—É—Ç –æ—Ç 5000 –¥–æ 10000
               |–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ:
               |–°–∏—Å—Ç–µ–º–Ω–∏–∫ –¥–æ 20000
               |–ò —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
               |""".stripMargin
          )

        case "–µ—â–µ" =>
          sendMessage(message.fromId, s"–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –∏—â–µ—à—å? (–ú–æ–Ω–∏–∫, –º—ã—à–∫—É, –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç. –¥.)")

        case _ =>
          sendMessage(message.fromId,
            s"""
               |–ù–µ –ø–æ–Ω—è–ª —á—Ç–æ —Ç—ã –∏—â–µ—à—å üòû
               |–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' - —è –Ω–∞–ø–∏—à—É —á—Ç–æ —É–º–µ—é
               |""".stripMargin)
      }
    } yield ()

  private def sendMessage(to: Long, text: String, attachment: Option[String] = None): F[Unit] = {
    val sendMessageReq = SendMessageReq(
      userId = to,
      message = text,
      version = getLongPollServerReq.version,
      accessToken = getLongPollServerReq.accessToken,
      attachment = attachment
    )
    for {
      _ <- Sync[F].delay { log.info(s"Sending message: $sendMessageReq") }
      _ <- vkApi.sendMessage(sendMessageReq).void
    } yield ()
  }

  override def onWallPostNew(wallPostNew: WallPostNew): F[Unit] =
    wallPostNew.postType match {
      case Some("suggest") =>
        for {
          _ <- Sync[F].delay { log.info(s"Got new wallpost: $wallPostNew") }
          _ <- vkApi.sendMessage(SendMessageReq(
            userId = 213461412,
            message = "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
            version = getLongPollServerReq.version,
            accessToken = getLongPollServerReq.accessToken,
            attachment = Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")
          ))
        } yield ()

      case Some("post") =>
        for {
          _ <- Sync[F].delay { println(wallPostNew.toString) }
          offer = wallPostHandler.wallPostToOffer(wallPostNew)
          _ <- offerRepository.insert(offer)
          _ <- wallPostNew.signerId map { signerId =>
            vkApi.sendMessage(SendMessageReq(
              userId = signerId,
              message = "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
              version = getLongPollServerReq.version,
              accessToken = getLongPollServerReq.accessToken,
              attachment = Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")
            ))
          } getOrElse {
            vkApi.sendMessage(SendMessageReq(
              userId = 213461412,
              message = "–¢—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏! –ü–æ–ø—Ä–∞–≤—å",
              version = getLongPollServerReq.version,
              accessToken = getLongPollServerReq.accessToken,
              attachment = Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")
            ))
          }
        } yield ()

      case _ =>
        Sync[F].delay().void
    }

}
