package io.github.oybek.geekbear

import cats.implicits._
import cats.effect.{Async, Concurrent, Sync, Timer}
import cats.effect.syntax.all._
import cats.effect.concurrent.Ref
import io.github.oybek.geekbear.db.repository.{OfferRepository, OfferRepositoryAlgebra, StatsRepositoryAlgebra, UserRepository, UserRepositoryAlgebra}
import io.github.oybek.geekbear.model.Offer
import io.github.oybek.geekbear.service.{Jaw, WallPostHandler}
import io.github.oybek.geekbear.vk._
import io.github.oybek.geekbear.vk.api.{Action, Button, GetLongPollServerReq, Keyboard, SendMessageReq, VkApi, WallCommentReq}
import org.http4s.client.Client
import org.slf4j.LoggerFactory

case class Bot[F[_]: Async: Timer: Concurrent](httpClient: Client[F],
                                              userStates: Ref[F, Map[Long, List[Offer]]],
                                              vkApi: VkApi[F],
                                              offerRepository: OfferRepositoryAlgebra[F],
                                              userRepository: UserRepositoryAlgebra[F],
                                              statsRepository: StatsRepositoryAlgebra[F],
                                              getLongPollServerReq: GetLongPollServerReq,
                                              jaw: Jaw[F],
                                              wallPostHandler: WallPostHandler)
  extends LongPollBot[F](httpClient, vkApi, getLongPollServerReq) {

  private val adminIds = List(213461412L)

  private val log = LoggerFactory.getLogger("bot")

  override def onMessageNew(message: MessageNew): F[Unit] =
    for {
      _ <- Sync[F].delay { log.info(s"Got message: $message") }

      _ <- "–∂—Ä–∏ -?[0-9]+".r
        .findFirstIn(message.text.toLowerCase)
        .traverse { q =>
          val groupId = q.split(' ')(1).toLong
          for {
            _ <- sendMessage(message.fromId, "–ù–∞—á–∏–Ω–∞—é –ø–æ–∂–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É...")
            res <- jaw.breakfast(List(groupId), adminIds)
            _ <- sendMessage(message.fromId, s"–°–æ–∂—Ä–∞–ª ${res.length} –ø–æ—Å—Ç–æ–≤\n–ü–µ—Ä–µ–≤–∞—Ä–∏–ª ${res.count(_.isRight)}")
          } yield ()
        }.whenA(adminIds.contains(message.fromId)).start.void

      _ <- message.geo.map { geo =>
        for {
          _ <- Sync[F].delay { log.info(s"Message has geo, updating user_info's geo: $geo") }
          _ <- userRepository.upsert(message.fromId -> geo.coordinates)
          _ <- sendMessage(message.fromId,
            s"""
              |–û—Ç–ª–∏—á–Ω–æ! –Ø –æ–±–Ω–æ–≤–∏–ª —Ç–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ üìç
              |${geo.place.map(_.title).getOrElse("")}
              |""".stripMargin)
        } yield ()
      }.getOrElse {
        if (message.text.toLowerCase == "–Ω–∞—á–∞—Ç—å") {
          sendMessage(message.fromId,
            """
              |–ü—Ä–∏–≤–µ—Ç - –Ø –ì–∏–∫ –ú–µ–¥–≤–µ–¥—å üêª!
              |–í —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ –í–ö —è –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –ø—Ä–æ–¥–∞—Ç—å –∏–ª–∏ –∫—É–ø–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É
              |–Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–µ–Ω–µ –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞–π–¥—É –Ω—É–∂–Ω–æ–µ —Ç–µ–±–µ
              |–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' –∏ —è –ø–æ–¥—Å–∫–∞–∂—É —á—Ç–æ —É–º–µ—é
              |""".stripMargin)
        } else {
          wallPostHandler.getTType(message.text.toLowerCase) match {
            case Some(thing) => for {
              user <- userRepository.selectById(message.fromId)
              _ <- user.map(usr => whenNewSearch(message)(thing, usr._2)).getOrElse(
                sendMessage(message.fromId,
                  """
                    |–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ - –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
                    |–ß—Ç–æ–±—ã —è –∑–Ω–∞–ª –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                    |""".stripMargin,
                  None,
                  Keyboard(true, List(List(Button(Action("location"))))).some
                )
              )
            } yield ()
            case None => whenNotSearch(message)
          }
        }
      }
    } yield ()

  def whenNewSearch(message: MessageNew)(thing: String, userPos: Coord): F[Unit] =
    for {
      offers <- offerRepository.selectByTType(thing).map { offs =>
        val from = "–æ—Ç[ ]+\\d+".r.findFirstIn(message.text).map(_.split(' ')(1).toLong).getOrElse(0L)
        val to = "–¥–æ[ ]+\\d+".r.findFirstIn(message.text).map(_.split(' ')(1).toLong).getOrElse(1000000L)
        offs.filter(offer =>
          offer.price.exists(x => x >= from && x <= to) &&
          /* TODO: Uncomment, when expaned to several citites offer.coord.exists(_.distKmTo(userPos) < 50) && */
          offer.sold.isEmpty
        ).sortWith {
          case (off1, off2) => off1.date > off2.date
        }
      }
      _ <- offers match {
        case Nil =>
          sendMessage(message.fromId, s"–ù–µ –Ω–∞—à–µ–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É")
        case offersNonEmpty =>
          def word(n: Int): String = n match {
            case 1 => "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
            case 2|3|4 => "–æ–±—ä—è–≤–ª–µ–Ω–∏—è"
            case _ => "–æ–±—ä—è–≤–ª–µ–Ω–∏–π"
          }
          sendMessage(
            message.fromId,
            s"""
               |–Ø –Ω–∞—à–µ–ª ${offers.length} ${word(offers.length)}
               |${if (offers.length > 1) "–í–æ—Ç –ø–µ—Ä–≤–æ–µ. –ù–∞–ø–∏—à–∏ '–µ—â–µ' —è —Å–∫–∏–Ω—É —Å–ª–µ–¥—É—é—â–µ–µ" else "–í–æ—Ç –æ–Ω–æ:" }
               |""".stripMargin,
            attachment = s"wall${offersNonEmpty.head.groupId}_${offersNonEmpty.head.id}".some,
            keyboard =
              if (offers.length > 1)
                Keyboard(true, List(List(Button(Action("text", "–µ—â–µ".some))))).some
              else
                None
          )
      }
      _ <- userStates.modify {
        states => (states + (message.fromId -> offers), states)
      }
    } yield ()

  def whenNotSearch(message: MessageNew): F[Unit] =
    for {
      states <- userStates.get
      offers = states.getOrElse(message.fromId, List())
      _ <- message.text.toLowerCase match {
        case "–µ—â–µ" if offers.length >= 2 =>
          val rest = offers.tail
          for {
            _ <- userStates.modify { x =>
              (x + (message.fromId -> rest), x)
            }.void
            _ <- sendMessage(
              message.fromId,
              if (rest.length == 1) "" else s"–ï—â–µ ${rest.length-1} –≤ —Å–ø–∏—Å–∫–µ",
              Some(s"wall${rest.head.groupId}_${rest.head.id}"),
              if (rest.length > 1)
                Keyboard(true, List(List(Button(Action("text", "–µ—â–µ".some))))).some
              else None
            )
          } yield ()

        case "–ø–æ–º–æ—â—å" =>
          sendMessage(message.fromId,
            s"""
               |–Ø –Ω–∞—Ö–æ–∂—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
               |–ù–æ—É—Ç, –°–∏—Å—Ç–µ–º–Ω–∏–∫ –∏–ª–∏ –í–∏–¥—è—Ö–∞ –∏ —Ç. –¥.
               |
               |–ï—â–µ —è —É–º–µ—é —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–µ
               |–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å:
               |–ù–æ—É—Ç –æ—Ç 5000 –¥–æ 10000
               |–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:
               |–°–∏—Å—Ç–µ–º–Ω–∏–∫ –¥–æ 20000
               |
               |–û–±—ä—è–≤–ª–µ–Ω–∏—è —è –∏—â—É –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ
               |""".stripMargin
          )

        case "–µ—â–µ" =>
          sendMessage(message.fromId, s"–ö–∞–∫–æ–π —Ç–æ–≤–∞—Ä –∏—â–µ—à—å? (–ú–æ–Ω–∏–∫, –º—ã—à–∫—É, –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç. –¥.)")

        case "–º–µ–¥" =>
          sendMessage(message.fromId, s"–ì–¥–µ?!")

        case "–ø—Ä–∏–≤–µ—Ç" =>
          sendMessage(message.fromId, "–ü—Ä–∏–≤–µ—Ç - –Ø –ì–∏–∫ –ú–µ–¥–≤–µ–¥—å)")

        case "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" =>
          for {
            stats <- statsRepository.stats
            _ <- sendMessage(message.fromId, s"–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ${stats._1}\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ ${stats._2}")
          } yield ()

        case _ =>
          sendMessage(message.fromId,
            s"""
               |–ù–µ –ø–æ–Ω—è–ª —á—Ç–æ —Ç—ã –∏—â–µ—à—å!
               |–ù–∞–ø–∏—à–∏ '–ø–æ–º–æ—â—å' - —è –Ω–∞–ø–∏—à—É —á—Ç–æ —É–º–µ—é
               |""".stripMargin,
            None,
            Keyboard(true, List(List(Button(Action("text", "–ø–æ–º–æ—â—å".some))))).some)
      }
    } yield ()

  private def sendMessage(to: Long, text: String,
                          attachment: Option[String] = None,
                          keyboard: Option[Keyboard] = None): F[Unit] = {
    val sendMessageReq = SendMessageReq(
      userId = to,
      message = text,
      version = getLongPollServerReq.version,
      accessToken = getLongPollServerReq.accessToken,
      attachment = attachment,
      keyboard = keyboard
    )
    for {
      _ <- Sync[F].delay { log.info(s"Sending message: $sendMessageReq") }
      _ <- vkApi.sendMessage(sendMessageReq).void
    } yield ()
  }

  override def onWallPostNew(wallPostNew: WallPostNew): F[Unit] =
    wallPostNew.postType match {
      case Some("suggest") =>
        for {
          _ <- Sync[F].delay { log.info(s"Got new wallpost suggestion: $wallPostNew") }
          _ <- adminIds.traverse(id =>
            sendMessage(
              id,
              "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
              Some(s"wall-${getLongPollServerReq.groupId}_${wallPostNew.id}")
          )).void
        } yield ()

      case Some("post") =>
        for {
          _ <- Sync[F].delay { log.info(s"Posting new wallpost: ${wallPostNew.toString}") }

          userInfo = for {
            userId <- wallPostNew.signerId
            geo <- wallPostNew.geo
          } yield userId -> geo.coordinates

          _ <- userInfo.traverse(x => userRepository.upsert(x))
          coord <- wallPostNew.signerId.flatTraverse(userRepository.coordById)

          offer = wallPostHandler.wallPostToOffer(wallPostNew)
            .copy(
              latitude = coord.map(_.latitude),
              longitude = coord.map(_.longitude)
            )
          _ <- offerRepository.insert(offer)
          _ <- wallPostNew.signerId map { signerId =>
            sendMessage(
              signerId,
              "–¢–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
              Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")).void
          } getOrElse {
            adminIds.traverse(id =>
              sendMessage(
                id,
                "–¢—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏! –ü–æ–ø—Ä–∞–≤—å –∏ –æ–±–Ω–æ–≤–∏ –≤ –±–∞–∑–µ",
                attachment = Some(s"wall${wallPostNew.ownerId}_${wallPostNew.id}")
            )).void
          }
        } yield ()

      case _ =>
        Sync[F].delay().void
    }

  override def onWallReplyNew(wallReplyNew: WallReplyNew): F[Unit] =
    wallReplyNew.text.toLowerCase match {
      case "–ø—Ä–æ–¥–∞–Ω" => for {
        offerOpt <- offerRepository.selectById(wallReplyNew.postId)
        _ <- offerOpt.filter { offer =>
          offer.fromId == wallReplyNew.fromId && offer.sold.isEmpty
        }.traverse { offer =>
          for {
            _ <- offerRepository.sold(offer.id, wallReplyNew.date)
            _ <- vkApi.wallComment(
              WallCommentReq(
                ownerId = -getLongPollServerReq.groupId.toLong,
                postId = offer.id,
                message = s"–ü—Ä–æ–¥–∞–Ω –∑–∞ ${wallReplyNew.date - offer.date} —Å–µ–∫—É–Ω–¥",
                version = getLongPollServerReq.version,
                accessToken = getLongPollServerReq.accessToken,
              )
            )
          } yield ()
        }
      } yield()
      case _ => Sync[F].delay().void
    }
}
