package com.oybek.bridgevk.utils;

import com.google.gson.Gson;
import com.oybek.bridgevk.Courier;
import com.oybek.bridgevk.Entities.Message;
import com.oybek.bridgevk.Entities.TramArrivalData;
import com.oybek.bridgevk.Entities.TramStopInfo;

import java.io.IOException;
import java.util.List;

/**
 * –ü–∞—Ä—Å–µ—Ä –æ—Ç–≤–µ—Ç–∞ VK API
 */
public class ResponseParser {
    private final static String URL = "http://localhost:8888/get_nearest?latitude=%f&longitude=%f";
    private final static String URL_GET_NEAREST_TO_NEAREST = "http://localhost:8888/get_nearest_to_nearest?latitude=%f&longitude=%f";
    private final static String URL_GET_DISTANCE = "http://localhost:8888/get_distance?lat1=%f&lon1=%f&lat2=%f&lon2=%f";
    private final static String NOT_FOUND_MESSAGE = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–º–≤–∞—è—Ö üòû";
    private final static double DISTANCE_LIMIT = 25.0;
    private final static Gson GSON = new Gson();

    /**
     * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
     *
     * @param message - —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
     * @throws IOException - –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏—è—Ö –∫ API
     */
    public static String deserialize(Message message) throws IOException {
        StringBuilder answer = new StringBuilder();

        TramStopInfo tramStopInfo = GSON.fromJson(Courier.get(String.format(URL, message.getGeo().getLatitude(),
                message.getGeo().getLongitude())), TramStopInfo.class);

        if (tramStopInfo.getArrivals().isEmpty()) {
            answer.append(NOT_FOUND_MESSAGE);
            return answer.toString();
        }

        answer.append("–ë–ª–∏–∂–∞–π—à–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞: ").append(tramStopInfo.getName()).append("\n");
        answer.append(operateDirection(tramStopInfo.getArrivals()));

        Double distance = Double.valueOf(Courier.get(String.format(URL_GET_DISTANCE, message.getGeo().getLatitude(),
                message.getGeo().getLongitude(), tramStopInfo.getLatitude(), tramStopInfo.getLongitude())));

        if (distance > DISTANCE_LIMIT) {
            tramStopInfo = GSON.fromJson(Courier.get(String.format(URL_GET_NEAREST_TO_NEAREST,
                    message.getGeo().getLatitude(), message.getGeo().getLongitude())), TramStopInfo.class);
            answer.append("\n–î—Ä—É–≥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ").append(tramStopInfo.getName()).append("\n");
            answer.append(operateDirection(tramStopInfo.getArrivals()));
        }

        return answer.toString();
    }

    /**
     * –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
     *
     * @param arrivals - –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–≤–∞–Ω–∏–∏ —Ç—Ä–∞–º–≤–∞–µ–≤
     * @return —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–∞–º–≤–∞—è
     */
    private static String operateDirection(List<TramArrivalData> arrivals) {
        StringBuilder builder = new StringBuilder();
        arrivals.forEach(arrivalDate -> {
            long timeToReach = arrivalDate.getTimeToReach();

            if (timeToReach == 0) {
                builder.append(arrivalDate.getRoute()).append("-–π —Ç—Ä–∞–º–≤–∞–π –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n");
            } else {
                builder.append(arrivalDate.getRoute()).append("-–π —Ç—Ä–∞–º–≤–∞–π –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ")
                        .append(arrivalDate.getTimeToReach()).append(" –º–∏–Ω.\n");
            }
        });
        return builder.toString();
    }
}
